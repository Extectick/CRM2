// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  telegramId   String   @unique @map("telegram_id")
  fullName     String   @map("full_name")
  departmentId String   @map("department_id")
  role         UserRole @default(USER)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  department      Department @relation(fields: [departmentId], references: [id])
  appealsCreated  Appeal[]   @relation("Creator")
  appealsExecuted Appeal[]   @relation("Executor")
  appealsAssigned Appeal[]   @relation("AppealExecutors")
  messagesSent    AppealMessage[] @relation("MessageSender")

  @@map("users")
}

model Department {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  users   User[]
  appeals Appeal[]

  @@map("departments")
}

enum UserRole {
  USER
  DEPARTMENT_HEAD
  ADMIN
}

model Appeal {
  id           String       @id @default(cuid())
  number       Int          @default(autoincrement())
  subject      String
  description  String
  status       AppealStatus @default(PENDING)
  departmentId String       @map("department_id")
  creatorId    String       @map("creator_id")
  executorId   String?      @map("executor_id")
  chatId       String?      @unique @map("chat_id")
  lastNotifiedAt DateTime?  @map("last_notified_at")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  // Relations
  department   Department   @relation(fields: [departmentId], references: [id])
  creator      User         @relation("Creator", fields: [creatorId], references: [id])
  executor     User?        @relation("Executor", fields: [executorId], references: [id])
  executors    User[]       @relation("AppealExecutors")
  messages     AppealMessage[]
  
  @@map("appeals")
}

model AppealMessage {
  id          String   @id @default(cuid())
  appealId    String   @map("appeal_id")
  senderId    String   @map("sender_id")
  content     String?
  fileUrl     String?  @map("file_url")
  fileSize    Int?     @map("file_size")
  fileType    String?  @map("file_type")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  appeal      Appeal    @relation(fields: [appealId], references: [id])
  sender      User      @relation("MessageSender", fields: [senderId], references: [id])

  @@map("appeal_messages")
}

enum AppealStatus {
  PENDING       // Отправлено
  IN_PROGRESS   // В работе
  IN_REVIEW     // На проверке
  IN_CONFIRMATION // На подтверждении
  REJECTED      // Отклонено
  COMPLETED     // Завершено
  ARCHIVED      // В архиве
}
